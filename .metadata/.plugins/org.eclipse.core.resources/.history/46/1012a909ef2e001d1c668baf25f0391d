package com.globallogic.creditcardpayment.pdf;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.globallogic.creditcardpayment.entity.Account;
import com.globallogic.creditcardpayment.entity.Customer;
import com.globallogic.creditcardpayment.entity.Statement;
import com.globallogic.creditcardpayment.repositories.AccountRepo;
import com.globallogic.creditcardpayment.repositories.CustomerRepo;
import com.globallogic.creditcardpayment.repositories.StatementRepo;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

@Service
public class PdfGenerator {

	@Autowired
	CustomerRepo customerRepo;

	@Autowired
	AccountRepo accountRepo;

	@Autowired
	StatementRepo statementRepo;

	private PdfPTable table;

	private PdfPCell cell1, cell2, cell3, cell4;

	private float[] columnWidths = { 1f, 1f, 1f, 1f };;

	public void statementPdfGeneratedForCustomer(long id) {

		Customer customer = customerRepo.findById(id).get();
		Account account = accountRepo.findById(customer.getAccount().getAccountid()).get();

		List<Statement> statement = statementRepo.findAllWithBillingDateBeforeAndCustomerId(id);

		Document document = new Document();
		try {
			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(
					"C:\\Users\\gaurav.k.singh\\Desktop\\ProjectStatement/BilledStatementForCustomer" + id + ".pdf"));
			document.open();
			document.add(new Paragraph("                        STATEMENT FOR CUSTOMER ID " + id));
			document.add(new Paragraph(" "));
			document.add(new Paragraph(" NAME : " + customer.getName()));
			document.add(new Paragraph(" "));
			document.add(new Paragraph(" EMAIL : " + customer.getEmail()));
			document.add(new Paragraph(" "));
			document.add(new Paragraph(" PHONE NO : " + customer.getPhoneNo()));
			document.add(new Paragraph(" "));
			document.add(new Paragraph(" ACCOUNT NO : " + account.getAccountName()));
			document.add(new Paragraph(" "));
			document.add(new Paragraph(" BALANCE : " + account.getBalance()));
			document.add(new Paragraph(" "));

			table = new PdfPTable(4); // 3 columns.
			table.setWidthPercentage(100); // Width 100%
			table.setSpacingBefore(10f); // Space before table
			table.setSpacingAfter(10f); // Space after table

			// Set Column widths
			float[] columnWidths = { 1f, 1f, 1f, 1f };
			table.setWidths(columnWidths);

			cell1 = new PdfPCell(new Paragraph("STATEMENT ID"));
			cell1.setBorderColor(BaseColor.BLUE);
			cell1.setPaddingLeft(10);
			cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell1.setVerticalAlignment(Element.ALIGN_MIDDLE);

			cell2 = new PdfPCell(new Paragraph("BILLING DATE"));
			cell2.setBorderColor(BaseColor.GREEN);
			cell2.setPaddingLeft(10);
			cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell2.setVerticalAlignment(Element.ALIGN_MIDDLE);

			cell3 = new PdfPCell(new Paragraph("DUE AMOUNT"));
			cell3.setBorderColor(BaseColor.RED);
			cell3.setPaddingLeft(10);
			cell3.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell3.setVerticalAlignment(Element.ALIGN_MIDDLE);

			cell4 = new PdfPCell(new Paragraph("DUE DATE"));
			cell4.setBorderColor(BaseColor.RED);
			cell4.setPaddingLeft(10);
			cell4.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell4.setVerticalAlignment(Element.ALIGN_MIDDLE);

			// To avoid having the cell border and the content overlap, if you are having
			// thick cell borders
			// cell1.setUserBorderPadding(true);
			// cell2.setUserBorderPadding(true);
			// cell3.setUserBorderPadding(true);

			table.addCell(cell1);
			table.addCell(cell2);
			table.addCell(cell3);
			table.addCell(cell4);

			document.add(table);

			for (Statement st : statement) {
				table = new PdfPTable(4); // 4 columns.
				table.setWidthPercentage(100); // Width 100%
				table.setSpacingBefore(10f); // Space before table
				table.setSpacingAfter(10f); // Space after table

				// Set Column widths
				table.setWidths(columnWidths);

				PdfPCell cell1 = new PdfPCell(new Paragraph(st.getStatementid()+" "));
				cell1.setBorderColor(BaseColor.BLUE);
				cell1.setPaddingLeft(10);
				cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell1.setVerticalAlignment(Element.ALIGN_MIDDLE);

				PdfPCell cell2 = new PdfPCell(new Paragraph(st.getBillingDate().toString()));
				cell2.setBorderColor(BaseColor.GREEN);
				cell2.setPaddingLeft(10);
				cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell2.setVerticalAlignment(Element.ALIGN_MIDDLE);

				String due = st.getBillingDate() + "";
				PdfPCell cell3 = new PdfPCell(new Paragraph(due));
				cell3.setBorderColor(BaseColor.RED);
				cell3.setPaddingLeft(10);
				cell3.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell3.setVerticalAlignment(Element.ALIGN_MIDDLE);

				

				PdfPCell cell4 = new PdfPCell(new Paragraph(st.getDueDate().toString()));
				cell4.setBorderColor(BaseColor.RED);
				cell4.setPaddingLeft(10);
				cell4.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell4.setVerticalAlignment(Element.ALIGN_MIDDLE);

				// To avoid having the cell border and the content overlap, if you are having
				// thick cell borders
				// cell1.setUserBorderPadding(true);
				// cell2.setUserBorderPadding(true);
				// cell3.setUserBorderPadding(true);

				table.addCell(cell1);
				table.addCell(cell2);
				table.addCell(cell3);
				table.addCell(cell4);

				document.add(table);
			}

			document.close();
			writer.close();
		} catch (DocumentException ex) {
			ex.printStackTrace();
		} catch (FileNotFoundException exx) {
			exx.printStackTrace();
		}

	}

}
