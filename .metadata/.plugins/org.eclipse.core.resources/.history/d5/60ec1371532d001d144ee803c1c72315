package com.globallogic.creditcardpayment.servicesImpl;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;

import com.globallogic.creditcardpayment.entity.Address;
import com.globallogic.creditcardpayment.entity.Customer;
import com.globallogic.creditcardpayment.entity.Statement;
import com.globallogic.creditcardpayment.entity.Transaction;
import com.globallogic.creditcardpayment.repositories.AccountRepo;
import com.globallogic.creditcardpayment.repositories.AddressRepo;
import com.globallogic.creditcardpayment.repositories.CreditCardRepo;
import com.globallogic.creditcardpayment.repositories.CustomerRepo;
import com.globallogic.creditcardpayment.repositories.StatementRepo;
import com.globallogic.creditcardpayment.repositories.TransactionRepo;
import com.globallogic.creditcardpayment.repositories.UserRepo;
import com.globallogic.creditcardpayment.services.CustomerService;

public class CustomerServiceImpl implements CustomerService {

	@Autowired
	CustomerRepo customerRepo;

	@Autowired
	UserRepo userRepo;

	@Autowired
	AddressRepo addressRepo;

	@Autowired
	AccountRepo accountRepo;

	@Autowired
	CreditCardRepo creditCardRepo;

	@Autowired
	StatementRepo statementRepo;

	@Autowired
	TransactionRepo transactionRepo;

	@Override
	public List<Customer> showCustomer() {
		return customerRepo.findAll();
	}

	@Override
	public List<Customer> addCustomer(Customer customer) {
		customerRepo.save(customer);
		return customerRepo.findAll();
	}

	@Override
	public Customer updateCustomer(Customer customer) {

		userRepo.save(customer.getUser());

		List<Address> address = customer.getAddress();
		for (Address ad : address) {
			addressRepo.save(ad);
		}

		accountRepo.save(customer.getAccount());

		creditCardRepo.save(customer.getCreditCard());

		List<Statement> statement = customer.getStatement();
		for (Statement st : statement) {
			statementRepo.save(st);
		}

		List<Transaction> transactions = customer.getTransaction();
		for (Transaction tr : transactions) {
			transactionRepo.save(tr);
		}

		return customer;
	}

	@Override
	public String deleteCustomer(long id) {
		
		Customer customer = customerRepo.findById(id).get();
		
		userRepo.deleteById(customer.getUser().getId());

		List<Address> address = customer.getAddress();
		for (Address ad : address) {
			addressRepo.deleteById(ad.getAddressid());
		}

		accountRepo.deleteById(customer.getAccount().getAccountid());

		creditCardRepo.deleteById(customer.getCreditCard().getId());

		List<Statement> statement = customer.getStatement();
		for (Statement st : statement) {
			statementRepo.save(st);
		}

		List<Transaction> transactions = customer.getTransaction();
		for (Transaction tr : transactions) {
			transactionRepo.save(tr);
		}
		return "CUSTOMERS DETAILS DELETED SUCCESSFULLY";
	}

}
