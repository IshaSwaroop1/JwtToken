package com.globallogic.creditcardpayment.servicesImpl;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.time.LocalDate;
import java.util.List;

import javax.mail.MessagingException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.globallogic.creditcardpayment.entity.Account;
import com.globallogic.creditcardpayment.entity.Customer;
import com.globallogic.creditcardpayment.entity.Statement;
import com.globallogic.creditcardpayment.entity.Transaction;
import com.globallogic.creditcardpayment.pdfAndEmailService.EmailSenderService;
import com.globallogic.creditcardpayment.pdfAndEmailService.PdfGenerator;
import com.globallogic.creditcardpayment.repositories.AccountRepo;
import com.globallogic.creditcardpayment.repositories.CustomerRepo;
import com.globallogic.creditcardpayment.repositories.StatementRepo;
import com.globallogic.creditcardpayment.repositories.TransactionRepo;
import com.globallogic.creditcardpayment.services.StatementService;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

@Service
public class StatementServiceImpl implements StatementService {

	@Autowired
	StatementRepo statementRepo;

	@Autowired
	CustomerRepo customerRepo;

	@Autowired
	TransactionRepo transactionRepo;

	@Autowired
	AccountRepo accountRepo;

	@Autowired
	PdfGenerator pdfGenerator;

	@Autowired
	private EmailSenderService emailSenderService;

	@Override
	public List<Statement> showAllStatement() {
		return statementRepo.findAll();
	}

	@Override
	public List<Statement> addStatement(Statement statement) {
		Customer customer = customerRepo.findById(statement.getCustomer().getId()).get();
		statement.setCustomer(customer);
		LocalDate currentDate = java.time.LocalDate.now();
		// List<Transaction> transactions =
		// transactionRepo.findAllByCustomerId(customer.getId());
		LocalDate billingDate = statement.getBillingDate();
		statementRepo.save(statement);
		return statementRepo.findAll();
	}

	@Override
	public Statement updateStatement(Statement statement) {
		Customer customer = customerRepo.findById(statement.getCustomer().getId()).get();
		statement.setCustomer(customer);
		statementRepo.save(statement);
		return statement;
	}

	@Override
	public String deleteStatement(long id) {
		statementRepo.deleteById(id);
		return "STATEMENT DELETED SUCCESSFULLY";
	}

	@Override
	public Statement showStatement(long id) {
		return statementRepo.findById(id).get();
	}

	@Override
	public List<Statement> showAllBilledStatementForCustomer(long id) {
		// TODO Auto-generated method stub
		Customer customer = customerRepo.findById(id).get();
		String path = pdfGenerator.billedStatementPdfGeneratedForCustomer(id);
		try {
			emailSenderService.sendEmailWithAttachment(customer.getEmail(), "Statement attached with mail",
					"HI " + customer.getName(), path);
		} catch (MessagingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return statementRepo.findAllWithBillingDateBeforeAndCustomerId(id);
	}

	@Override
	public List<Statement> showAllUnbilledStatementForCustomer(long id) {
		// TODO Auto-generated method stub
		pdfGenerator.unbilledStatementPdfGeneratedForCustomer(id);
		return statementRepo.findAllWithBillingDateAfterAndCustomerId(id);
	}

}
